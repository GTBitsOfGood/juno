openapi: 3.0.0
paths:
  /auth/api_key/jwt:
    post:
      operationId: AuthController_getApiKeyJWT
      summary: Generates a temporary JWT for the project tied to a specified API key.
      description: >-
        JSON Web Tokens are used for the vast majority of API-gateway calls. The
        Juno SDK provides the means of automatically authenticating through this
        route given a valid API key.
      parameters:
        - name: Authorization
          required: true
          in: header
          description: A valid API key
          schema:
            type: string
      responses:
        '201':
          description: Successfully created a JWT.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueJWTResponse'
      tags:
        - auth
      security:
        - API_Key: []
  /auth/user/jwt:
    post:
      operationId: AuthController_getUserJWT
      summary: Generates a temporary JWT tied to a specified user.
      description: >-
        JSON Web Tokens are used for the vast majority of API-gateway calls. The
        Juno SDK provides the means of automatically authenticating through this
        route given valid user credentials.
      parameters:
        - name: X-User-Password
          in: header
          description: Password of the user
          required: true
          schema:
            type: string
        - name: X-User-Email
          in: header
          description: Email of a user
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully created a JWT.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueJWTResponse'
        '400':
          description: Bad request
        '403':
          description: Invalid User Credentials
      tags:
        - auth
      security:
        - API_Key: []
  /auth/key:
    post:
      operationId: AuthController_createApiKey
      summary: Issues a new API key for the project tied to the specified environment.
      parameters:
        - name: X-User-Password
          in: header
          description: Password of the admin or superadmin user
          required: true
          schema:
            type: string
        - name: X-User-Email
          in: header
          description: Email of an admin or superadmin user
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueApiKeyRequest'
      responses:
        '201':
          description: The API Key has been successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueApiKeyResponse'
      tags:
        - auth
    delete:
      operationId: AuthController_deleteApiKey
      summary: Deletes an API key, detaching it from its project.
      parameters:
        - name: Authorization
          required: true
          in: header
          description: A valid API key
          schema:
            type: string
      responses:
        '200':
          description: Successful API Key deletion
        '401':
          description: Invalid API Key
      tags:
        - auth
      security:
        - API_Key: []
  /project/id/{id}:
    get:
      operationId: ProjectController_getProjectById
      summary: Retrieves a project by its unique ID.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returned the project associated with the given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: ID must be a number
        '404':
          description: No project with specified ID was found
      tags:
        - project
      security:
        - API_Key: []
  /project:
    get:
      operationId: ProjectController_getAllProjects
      summary: Retrieves all projects.
      parameters:
        - name: X-User-Password
          in: header
          description: Password of the admin or superadmin user
          required: true
          schema:
            type: string
        - name: X-User-Email
          in: header
          description: Email of an admin or superadmin user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned all projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponses'
      tags:
        - project
      security:
        - API_Key: []
    post:
      operationId: ProjectController_createProject
      summary: Creates a new project with the specified parameters.
      parameters:
        - name: X-User-Password
          in: header
          description: Password of the admin or superadmin user
          required: true
          schema:
            type: string
        - name: X-User-Email
          in: header
          description: Email of an admin or superadmin user
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectModel'
      responses:
        '201':
          description: Successfully created project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Name should not be empty
      tags:
        - project
      security:
        - API_Key: []
  /project/{id}/users:
    get:
      operationId: ProjectController_getUsersByProject
      summary: 'Retrieve all users assosciated with a project. '
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: X-User-Password
          in: header
          description: Password of the admin or superadmin user
          required: true
          schema:
            type: string
        - name: X-User-Email
          in: header
          description: Email of an admin or superadmin user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned all users asossciated with given project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponses'
        '404':
          description: No project found with this id.
      tags:
        - project
      security:
        - API_Key: []
  /project/name/{name}:
    get:
      operationId: ProjectController_getProjectByName
      summary: Retrieves a project by its unique name.
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returned the project associated with the given name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          description: No project with specified name was found
      tags:
        - project
      security:
        - API_Key: []
  /project/id/{id}/user:
    put:
      operationId: ProjectController_linkUserWithProjectId
      summary: Links a specified user with a given project ID.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkUserModel'
      responses:
        '200':
          description: ''
        '400':
          description: Invalid user/project parameters
        '401':
          description: Invalid user credentials
        '404':
          description: Cannot find valid user and/or project
      tags:
        - project
      security:
        - API_Key: []
  /project/name/{name}/user:
    put:
      operationId: ProjectController_linkUserWithProjectName
      summary: Links a specified user with a given project name.
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkUserModel'
      responses:
        '200':
          description: ''
        '400':
          description: Invalid user/project parameters
        '401':
          description: Invalid user credentials
        '404':
          description: Cannot find valid user and/or project
      tags:
        - project
      security:
        - API_Key: []
  /user:
    get:
      operationId: UserController_getAllUsers
      summary: Retrieves all users.
      parameters:
        - name: X-User-Password
          in: header
          description: Password of the admin or superadmin user
          required: true
          schema:
            type: string
        - name: X-User-Email
          in: header
          description: Email of an admin or superadmin user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponses'
      tags:
        - user
    post:
      operationId: UserController_createUser
      summary: Create a new user.
      parameters:
        - name: X-User-Password
          in: header
          description: Password of the admin or superadmin user
          required: true
          schema:
            type: string
        - name: X-User-Email
          in: header
          description: Email of an admin or superadmin user
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: The user details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserModel'
      responses:
        '201':
          description: The user has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized operation
      tags:
        - user
  /user/id/{id}:
    get:
      operationId: UserController_getUserById
      summary: Retrieve an existing user.
      parameters:
        - name: id
          required: true
          in: path
          description: The unique identifier of the user
          schema:
            type: string
      responses:
        '200':
          description: The found user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: id must be a number
        '404':
          description: No user with id found
      tags:
        - user
  /user/type:
    post:
      operationId: UserController_setUserType
      summary: Update user type.
      description: >-
        Updates the user type for an existing user. User type can be thought of
        as a role with role-based permissions, e.g. SUPERADMIN could have
        permissions an ADMIN would not. Only SUPERADMIN users can set types
      parameters:
        - name: X-User-Password
          in: header
          description: Password of the admin or superadmin user
          required: true
          schema:
            type: string
        - name: X-User-Email
          in: header
          description: Email of an admin or superadmin user
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: User ID, email, and the new type to be set
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUserTypeModel'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '201':
          description: ''
        '400':
          description: Bad request
        '401':
          description: Unauthorized operation
      tags:
        - user
  /user/id/{id}/project:
    put:
      operationId: UserController_linkUserWithProjectId
      summary: Link user to project.
      description: Associates a user with a project ID.
      parameters:
        - name: id
          required: true
          in: path
          description: User ID being linked to a project
          schema:
            type: string
        - name: X-User-Password
          in: header
          description: Password of the admin or superadmin user
          required: true
          schema:
            type: string
        - name: X-User-Email
          in: header
          description: Email of an admin or superadmin user
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Project details to link with the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkProjectModel'
      responses:
        '200':
          description: User linked to project successfully.
        '400':
          description: Bad request
        '401':
          description: Unauthorized operation
      tags:
        - user
  /email/setup:
    post:
      operationId: EmailController_setup
      summary: Sets up an email service with the given Sendgrid API Key
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupEmailServiceModel'
      responses:
        '201':
          description: Email Service setup successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupEmailResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      tags:
        - email
      security:
        - API_Key: []
  /email/register-sender:
    post:
      operationId: EmailController_registerSenderAddress
      summary: Registers a sender email address.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterEmailModel'
      responses:
        '201':
          description: Email registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterEmailResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      tags:
        - email
      security:
        - API_Key: []
  /email/register-domain:
    post:
      operationId: EmailController_registerEmailDomain
      summary: Registers a sender domain with SendGrid.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDomainModel'
      responses:
        '201':
          description: Domain registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterDomainResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
      tags:
        - email
      security:
        - API_Key: []
  /email/verify-domain:
    post:
      operationId: EmailController_verifySenderDomain
      summary: Verifies a sender domain registration status.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyDomainModel'
      responses:
        '201':
          description: Domain is registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterDomainResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: No domain registered
      tags:
        - email
      security:
        - API_Key: []
  /email/send:
    post:
      operationId: EmailController_sendEmail
      summary: Sends an email using Juno services.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailModel'
      responses:
        '201':
          description: Email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      tags:
        - email
      security:
        - API_Key: []
  /file/provider:
    post:
      operationId: FileProviderController_registerFileProvider
      summary: Registers a File Provider.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterFileProviderModel'
      responses:
        '200':
          description: Returned the file provider associated with the given data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileProviderResponse'
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileProviderResponse'
        '400':
          description: Parameters are invalid
      tags:
        - file_provider
      security:
        - api_key: []
  /file/download:
    post:
      operationId: FileDownloadController_downloadFile
      summary: Downloads a file
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadFileModel'
      responses:
        '200':
          description: Returned the url for file download
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadFileResponse'
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadFileResponse'
        '400':
          description: Parameters are invalid
        '404':
          description: Cannot find file to use for downloading
      tags:
        - file_download
      security:
        - api_key: []
  /file/upload:
    post:
      operationId: FileUploadController_uploadFile
      summary: Upload a file to a File Storage Provider's Bucket
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadFileModel'
      responses:
        '200':
          description: Returned the pre-signed URL used for file uploading
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
        '400':
          description: Parameters are invalid
      tags:
        - file_upload
      security:
        - api_key: []
  /file/bucket:
    post:
      operationId: FileBucketController_registerFileBucket
      summary: Registers a File Bucket.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterFileBucketModel'
      responses:
        '200':
          description: Returned the file bucket associated with the given data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileBucketResponse'
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileBucketResponse'
        '400':
          description: Parameters are invalid
      tags:
        - file_bucket
      security:
        - api_key: []
info:
  title: Juno
  description: Juno Public API Docs
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    API_Key:
      scheme: bearer
      bearerFormat: API_Key
      type: http
  schemas:
    IssueJWTResponse:
      type: object
      properties:
        token:
          type: string
          description: Created JWT token
      required:
        - token
    IssueApiKeyRequest:
      type: object
      properties:
        description:
          type: string
          description: Optional description for key
        environment:
          type: string
          description: Environment the key will be tied to
        project:
          type: object
          description: Project identifier
      required:
        - environment
        - project
    IssueApiKeyResponse:
      type: object
      properties:
        apiKey:
          type: string
          description: The generated API key
      required:
        - apiKey
    ProjectResponse:
      type: object
      properties:
        id:
          type: number
          description: The ID of the project
        name:
          type: string
          description: The name of the project
      required:
        - id
        - name
    ProjectResponses:
      type: object
      properties:
        projects:
          description: List of projects
          type: array
          items:
            $ref: '#/components/schemas/ProjectResponse'
      required:
        - projects
    UserResponse:
      type: object
      properties:
        id:
          type: number
          description: User id
        email:
          type: string
          description: User email
          example: user@email.com
        name:
          type: string
          description: User name
          example: John
        type:
          enum:
            - 0
            - 1
            - 2
            - -1
          type: number
          description: User type
          example: 1
        projectIds:
          description: Project IDs associated with user
          type: array
          items:
            type: number
      required:
        - id
        - email
        - name
        - type
        - projectIds
    UserResponses:
      type: object
      properties:
        users:
          description: List of Users
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
      required:
        - users
    CreateProjectModel:
      type: object
      properties:
        name:
          type: string
          description: The name of the project
      required:
        - name
    LinkUserModel:
      type: object
      properties:
        id:
          type: number
          description: The ID of the user
        email:
          type: string
          description: The email of the user
    CreateUserModel:
      type: object
      properties:
        email:
          type: string
          description: User email
        name:
          type: string
          description: User name
        password:
          type: string
          description: User password
      required:
        - email
        - name
        - password
    SetUserTypeModel:
      type: object
      properties:
        email:
          type: string
          description: User email
        id:
          type: number
          description: User id
        type:
          enum:
            - 0
            - 1
            - 2
            - -1
          type: number
          description: New user type
      required:
        - type
    LinkProjectModel:
      type: object
      properties:
        id:
          type: number
          description: ID of project to be linked
        name:
          type: string
          description: Name of project to be linked
    SetupEmailServiceModel:
      type: object
      properties:
        sendgridKey:
          type: string
          description: The sendgrid API Key to use
      required:
        - sendgridKey
    SetupEmailResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether an email was successfully setup
      required:
        - success
    RegisterEmailModel:
      type: object
      properties:
        email:
          type: string
          format: email
          description: The email to register
        name:
          type: string
          description: The name to assosicate with the email
        replyTo:
          type: string
          format: email
          description: The email to reply-to
        nickname:
          type: string
          description: >-
            The nickname to assosicate with the sender (only visible in
            sendgrid)
        address:
          type: string
          example: 123 Main St.
          description: The address to assosicate with the sender
        city:
          type: string
          example: Atlanta
          description: The city to assosicate with the sender
        state:
          type: string
          example: GA
          description: The state to assosicate with the sender
        zip:
          type: string
          example: '30332'
          description: The zip code to assosicate with the sender
        country:
          type: string
          example: USA
          description: The country to assosicate with the sender
      required:
        - email
        - name
        - nickname
        - address
        - city
        - state
        - zip
        - country
    RegisterEmailResponse:
      type: object
      properties:
        email:
          type: string
          format: email
          description: The email registered
      required:
        - email
    RegisterDomainModel:
      type: object
      properties:
        domain:
          type: string
          example: example.com
          description: Domain to be registered
        subdomain:
          type: string
          example: subdomain
          description: Subdomain to be registered
      required:
        - domain
    SendGridDNSRecord:
      type: object
      properties:
        valid:
          type: boolean
        type:
          type: string
        host:
          type: string
        data:
          type: string
      required:
        - valid
        - type
        - host
        - data
    SendGridDNSResponse:
      type: object
      properties:
        mail_cname:
          $ref: '#/components/schemas/SendGridDNSRecord'
        dkim1:
          $ref: '#/components/schemas/SendGridDNSRecord'
        dkim2:
          $ref: '#/components/schemas/SendGridDNSRecord'
      required:
        - mail_cname
        - dkim1
        - dkim2
    RegisterDomainResponse:
      type: object
      properties:
        id:
          type: number
        valid:
          type: string
        records:
          $ref: '#/components/schemas/SendGridDNSResponse'
        statusCode:
          type: number
      required:
        - id
        - valid
        - records
        - statusCode
    VerifyDomainModel:
      type: object
      properties:
        domain:
          type: string
          example: example.com
          description: Domain to be verified
      required:
        - domain
    EmailRecipient:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Recipient email address
        name:
          type: string
          example: John Doe
          description: Recipient name
      required:
        - email
    EmailSender:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Sender email address
        name:
          type: string
          example: John Doe
          description: Sender name
      required:
        - email
    EmailContent:
      type: object
      properties:
        type:
          type: string
          example: text/html
          description: MIME type for the content
        value:
          type: string
          example: Email content
          description: Content of the email
      required:
        - type
        - value
    SendEmailModel:
      type: object
      properties:
        recipients:
          description: List of recipients for the email
          type: array
          items:
            $ref: '#/components/schemas/EmailRecipient'
        cc:
          default: []
          description: List of email addresses to CC on the email
          type: array
          items:
            $ref: '#/components/schemas/EmailRecipient'
        bcc:
          default: []
          description: List of email addresses to BCC on the email
          type: array
          items:
            $ref: '#/components/schemas/EmailRecipient'
        replyToList:
          default: []
          description: List of emails to add to the Reply To list of the email
          type: array
          items:
            $ref: '#/components/schemas/EmailRecipient'
        sender:
          description: The sender of the email
          allOf:
            - $ref: '#/components/schemas/EmailSender'
        subject:
          type: string
          example: Email subject
          description: The subject of the email
        content:
          description: List of MIME content to send in the email
          type: array
          items:
            $ref: '#/components/schemas/EmailContent'
      required:
        - recipients
        - cc
        - bcc
        - replyToList
        - sender
        - subject
        - content
    SendEmailResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether an email was successfully sent
      required:
        - success
    AccessKey:
      type: object
      properties:
        publicAccessKey:
          type: string
          description: Client public access key
        privateAccessKey:
          type: string
          description: Client private access key
      required:
        - publicAccessKey
        - privateAccessKey
    RegisterFileProviderModel:
      type: object
      properties:
        accessKey:
          description: The access key to register with
          allOf:
            - $ref: '#/components/schemas/AccessKey'
        baseUrl:
          type: string
          example: https://s3.us-west-004.backblazeb2.com
          description: The base url associated with file provider.
        providerName:
          type: string
          example: AWS S3
          description: The file provider name being registered.
        type:
          enum:
            - 0
            - 1
            - -1
          type: string
          description: File provider type (one of S3 or AZURE)
          example: S3
      required:
        - accessKey
        - baseUrl
        - providerName
        - type
    FileProviderResponse:
      type: object
      properties:
        providerName:
          type: string
          description: The unique provider name of the file provider
        metadata:
          type: string
          description: The metadata of the file provider
      required:
        - providerName
        - metadata
    DownloadFileModel:
      type: object
      properties:
        bucketName:
          type: string
          description: The name of the bucket to use for downloading
        configId:
          type: number
          description: The config id of the file to use for downloading
        fileName:
          type: string
          description: The name of the file to use for downloading
        providerName:
          type: string
          description: The name of the provider to connect to for downloading
        region:
          type: string
          description: The region to use for downloading
      required:
        - bucketName
        - configId
        - fileName
        - providerName
    DownloadFileResponse:
      type: object
      properties:
        url:
          type: string
          description: The url for file download
      required:
        - url
    UploadFileModel:
      type: object
      properties:
        fileName:
          type: string
          description: Name of file
        bucketName:
          type: string
          description: Name of bucket.
        providerName:
          type: string
          example: AWS S3
          description: Name of file provider
        configId:
          type: number
          minimum: 0
          description: File's configId
        region:
          type: string
          description: File provider's region
      required:
        - fileName
        - bucketName
        - providerName
        - configId
    UploadFileResponse:
      type: object
      properties:
        url:
          type: string
          description: Pre-signed URL used in file upload
      required:
        - url
    RegisterFileBucketModel:
      type: object
      properties:
        name:
          type: string
          description: The unique name of the bucket
        configId:
          type: number
          description: Configuration ID for the bucket
        fileProviderName:
          type: string
          description: The file provider name associated with the bucket
        FileServiceFile:
          description: The file identifiers linked to this bucket
          type: array
          items:
            type: object
      required:
        - name
        - configId
        - fileProviderName
        - FileServiceFile
    FileBucketResponse:
      type: object
      properties:
        name:
          type: string
          description: The unique name of the registered bucket
        configId:
          type: number
          description: Configuration ID associated with the registered bucket
        fileProviderName:
          type: string
          description: The name of the file provider associated with the bucket
        FileServiceFile:
          description: The list of file identifiers associated with the bucket
          type: array
          items:
            type: object
      required:
        - name
        - configId
        - fileProviderName
        - FileServiceFile
