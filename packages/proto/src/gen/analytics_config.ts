// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.32.1
// source: analytics_config.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'juno.analytics_service.analytics_config';

export interface CreateConfigRequest {
  projectId: number;
  environment: string;
  serverAnalyticsKey: string;
  clientAnalyticsKey: string;
}

export interface ReadConfigRequest {
  id: number;
  environment: string;
}

export interface UpdateConfigRequest {
  id: number;
  environment: string;
  serverAnalyticsKey?: string | undefined;
  clientAnalyticsKey?: string | undefined;
}

export interface DeleteConfigRequest {
  id: number;
  environment: string;
}

export interface AnalyticsServiceConfig {
  id: number;
  environment: string;
  serverAnalyticsKey: string;
  clientAnalyticsKey: string;
}

export const JUNO_ANALYTICS_SERVICE_ANALYTICS_CONFIG_PACKAGE_NAME =
  'juno.analytics_service.analytics_config';

export interface AnalyticsConfigDbServiceClient {
  createAnalyticsConfig(
    request: CreateConfigRequest,
  ): Observable<AnalyticsServiceConfig>;

  readAnalyticsConfig(
    request: ReadConfigRequest,
  ): Observable<AnalyticsServiceConfig>;

  updateAnalyticsConfig(
    request: UpdateConfigRequest,
  ): Observable<AnalyticsServiceConfig>;

  deleteAnalyticsConfig(
    request: DeleteConfigRequest,
  ): Observable<AnalyticsServiceConfig>;
}

export interface AnalyticsConfigDbServiceController {
  createAnalyticsConfig(
    request: CreateConfigRequest,
  ):
    | Promise<AnalyticsServiceConfig>
    | Observable<AnalyticsServiceConfig>
    | AnalyticsServiceConfig;

  readAnalyticsConfig(
    request: ReadConfigRequest,
  ):
    | Promise<AnalyticsServiceConfig>
    | Observable<AnalyticsServiceConfig>
    | AnalyticsServiceConfig;

  updateAnalyticsConfig(
    request: UpdateConfigRequest,
  ):
    | Promise<AnalyticsServiceConfig>
    | Observable<AnalyticsServiceConfig>
    | AnalyticsServiceConfig;

  deleteAnalyticsConfig(
    request: DeleteConfigRequest,
  ):
    | Promise<AnalyticsServiceConfig>
    | Observable<AnalyticsServiceConfig>
    | AnalyticsServiceConfig;
}

export function AnalyticsConfigDbServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createAnalyticsConfig',
      'readAnalyticsConfig',
      'updateAnalyticsConfig',
      'deleteAnalyticsConfig',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AnalyticsConfigDbService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AnalyticsConfigDbService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ANALYTICS_CONFIG_DB_SERVICE_NAME = 'AnalyticsConfigDbService';
