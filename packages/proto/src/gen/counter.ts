// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.28.2
// source: counter.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'juno.counter';

export interface CreateCounterRequest {
  counterId: string;
  value: number;
}

export interface CreateCounterResponse {
  counterId: string;
  value: number;
}

export interface IncrementCounterRequest {
  counterId: string;
}

export interface IncrementCounterResponse {
  value: number;
}

export interface DecrementCounterRequest {
  counterId: string;
}

export interface DecrementCounterResponse {
  value: number;
}

export interface ResetCounterRequest {
  counterId: string;
}

export interface ResetCounterResponse {
  value: number;
}

export interface GetCounterRequest {
  counterId: string;
}

export interface GetCounterResponse {
  value: number;
}

export const JUNO_COUNTER_PACKAGE_NAME = 'juno.counter';

export interface CounterServiceClient {
  createCounter(
    request: CreateCounterRequest,
  ): Observable<CreateCounterResponse>;

  incrementCounter(
    request: IncrementCounterRequest,
  ): Observable<IncrementCounterResponse>;

  decrementCounter(
    request: DecrementCounterRequest,
  ): Observable<DecrementCounterResponse>;

  resetCounter(request: ResetCounterRequest): Observable<ResetCounterResponse>;

  getCounter(request: GetCounterRequest): Observable<GetCounterResponse>;
}

export interface CounterServiceController {
  createCounter(
    request: CreateCounterRequest,
  ):
    | Promise<CreateCounterResponse>
    | Observable<CreateCounterResponse>
    | CreateCounterResponse;

  incrementCounter(
    request: IncrementCounterRequest,
  ):
    | Promise<IncrementCounterResponse>
    | Observable<IncrementCounterResponse>
    | IncrementCounterResponse;

  decrementCounter(
    request: DecrementCounterRequest,
  ):
    | Promise<DecrementCounterResponse>
    | Observable<DecrementCounterResponse>
    | DecrementCounterResponse;

  resetCounter(
    request: ResetCounterRequest,
  ):
    | Promise<ResetCounterResponse>
    | Observable<ResetCounterResponse>
    | ResetCounterResponse;

  getCounter(
    request: GetCounterRequest,
  ):
    | Promise<GetCounterResponse>
    | Observable<GetCounterResponse>
    | GetCounterResponse;
}

export function CounterServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createCounter',
      'incrementCounter',
      'decrementCounter',
      'resetCounter',
      'getCounter',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('CounterService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('CounterService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const COUNTER_SERVICE_NAME = 'CounterService';
