// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.32.0
// source: counter.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'juno.counter';

export interface IncrementCounterRequest {
  counterId: string;
  amount: number;
}

export interface DecrementCounterRequest {
  counterId: string;
  amount: number;
}

export interface GetCounterRequest {
  counterId: string;
}

export interface ResetCounterRequest {
  counterId: string;
}

export interface CounterResponse {
  counterId: string;
  value: number;
}

export const JUNO_COUNTER_PACKAGE_NAME = 'juno.counter';

export interface CounterServiceClient {
  incrementCounter(
    request: IncrementCounterRequest,
  ): Observable<CounterResponse>;

  decrementCounter(
    request: DecrementCounterRequest,
  ): Observable<CounterResponse>;

  getCounter(request: GetCounterRequest): Observable<CounterResponse>;

  resetCounter(request: ResetCounterRequest): Observable<CounterResponse>;
}

export interface CounterServiceController {
  incrementCounter(
    request: IncrementCounterRequest,
  ): Promise<CounterResponse> | Observable<CounterResponse> | CounterResponse;

  decrementCounter(
    request: DecrementCounterRequest,
  ): Promise<CounterResponse> | Observable<CounterResponse> | CounterResponse;

  getCounter(
    request: GetCounterRequest,
  ): Promise<CounterResponse> | Observable<CounterResponse> | CounterResponse;

  resetCounter(
    request: ResetCounterRequest,
  ): Promise<CounterResponse> | Observable<CounterResponse> | CounterResponse;
}

export function CounterServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'incrementCounter',
      'decrementCounter',
      'getCounter',
      'resetCounter',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('CounterService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('CounterService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const COUNTER_SERVICE_NAME = 'CounterService';
