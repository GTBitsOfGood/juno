// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.32.1
// source: analytics.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'juno.analytics_service.analytics';

/** Click Event Request - matches bog-analytics ClickEventProperties */
export interface ClickEventRequest {
  /** objectId in bog-analytics */
  objectId: string;
  /** userId in bog-analytics */
  userId: string;
  /** Environment for analytics config lookup */
  environment: string;
  configEnvironment: string;
  configId: number;
}

/** Visit Event Request - matches bog-analytics VisitEventProperties */
export interface VisitEventRequest {
  /** pageUrl in bog-analytics */
  pageUrl: string;
  /** userId in bog-analytics */
  userId: string;
  /** Environment for analytics config lookup */
  environment: string;
  /**  */
  configEnvironment: string;
  configId: number;
}

/** Input Event Request - matches bog-analytics InputEventProperties */
export interface InputEventRequest {
  /** objectId in bog-analytics */
  objectId: string;
  /** userId in bog-analytics */
  userId: string;
  /** textValue in bog-analytics */
  textValue: string;
  /** Environment for analytics config lookup */
  environment: string;
  configEnvironment: string;
  configId: number;
}

/** Custom Event Request - matches bog-analytics logCustomEvent parameters */
export interface CustomEventRequest {
  /** category parameter in bog-analytics */
  category: string;
  /** subcategory parameter in bog-analytics */
  subcategory: string;
  /** properties object in bog-analytics */
  properties: { [key: string]: string };
  /** Environment for analytics config lookup */
  environment: string;
  configEnvironment: string;
  configId: number;
}

export interface CustomEventRequest_PropertiesEntry {
  key: string;
  value: string;
}

export interface CustomEventTypeRequest {
  projectName: string;
  configEnvironment: string;
  configId: number;
}

export interface CustomGraphTypeRequest {
  projectName: string;
  eventTypeId: string;
  configEnvironment: string;
  configId: number;
}

/** Paginated requests - matches bog-analytics GetEventsQueryParams */
export interface GetClickEventsRequest {
  projectName: string;
  /** afterId in bog-analytics (optional) */
  afterId: string;
  /** environment in bog-analytics */
  environment: string;
  /** limit in bog-analytics (optional) */
  limit: number;
  /** afterTime in bog-analytics (optional) */
  afterTime: string;
  configEnvironment: string;
  configId: number;
}

export interface GetVisitEventsRequest {
  projectName: string;
  afterId: string;
  environment: string;
  limit: number;
  afterTime: string;
  configEnvironment: string;
  configId: number;
}

export interface GetInputEventsRequest {
  projectName: string;
  afterId: string;
  environment: string;
  limit: number;
  afterTime: string;
  configEnvironment: string;
  configId: number;
}

/** Custom events extends the base pattern with category/subcategory */
export interface GetCustomEventsRequest {
  projectName: string;
  afterId: string;
  environment: string;
  limit: number;
  afterTime: string;
  /** category for custom events */
  category: string;
  /** subcategory for custom events */
  subcategory: string;
  configEnvironment: string;
  configId: number;
}

/** "Get All" requests - simpler, matches bog-analytics getAllXXXEvents */
export interface GetAllClickEventsRequest {
  projectName: string;
  /** afterTime in bog-analytics (optional) */
  afterTime: string;
  /** limit in bog-analytics (optional) */
  limit: number;
  configEnvironment: string;
  configId: number;
}

export interface GetAllVisitEventsRequest {
  projectName: string;
  afterTime: string;
  limit: number;
  configEnvironment: string;
  configId: number;
}

export interface GetAllInputEventsRequest {
  projectName: string;
  afterTime: string;
  limit: number;
  configEnvironment: string;
  configId: number;
}

export interface GetAllCustomEventsRequest {
  projectName: string;
  category: string;
  subcategory: string;
  afterTime: string;
  limit: number;
  configEnvironment: string;
  configId: number;
}

export interface ClickEventProperties {
  /** objectId in bog-analytics */
  objectId: string;
  /** userId in bog-analytics */
  userId: string;
}

export interface VisitEventProperties {
  /** pageUrl in bog-analytics */
  pageUrl: string;
  /** userId in bog-analytics */
  userId: string;
}

export interface InputEventProperties {
  /** objectId in bog-analytics */
  objectId: string;
  /** userId in bog-analytics */
  userId: string;
  /** textValue in bog-analytics */
  textValue: string;
}

/** Click Event Response - matches bog-analytics ClickEvent interface */
export interface ClickEventResponse {
  /** BaseEvent fields */
  id: string;
  /** category field */
  category: string;
  /** subcategory field */
  subcategory: string;
  /** projectId field */
  projectId: string;
  /** environment field */
  environment: string;
  /** createdAt field */
  createdAt: string;
  /** updatedAt field */
  updatedAt: string;
  /** eventProperties fields */
  eventProperties: ClickEventProperties | undefined;
}

/** Visit Event Response - matches bog-analytics VisitEvent interface */
export interface VisitEventResponse {
  /** BaseEvent fields */
  id: string;
  /** category field */
  category: string;
  /** subcategory field */
  subcategory: string;
  /** projectId field */
  projectId: string;
  /** environment field */
  environment: string;
  /** createdAt field */
  createdAt: string;
  /** updatedAt field */
  updatedAt: string;
  /** eventProperties fields */
  eventProperties: VisitEventProperties | undefined;
}

/** Input Event Response - matches bog-analytics InputEvent interface */
export interface InputEventResponse {
  /** BaseEvent fields */
  id: string;
  /** category field */
  category: string;
  /** subcategory field */
  subcategory: string;
  /** projectId field */
  projectId: string;
  /** environment field */
  environment: string;
  /** createdAt field */
  createdAt: string;
  /** updatedAt field */
  updatedAt: string;
  /** eventProperties fields */
  eventProperties: InputEventProperties | undefined;
}

/** Custom Event Response - matches bog-analytics CustomEvent interface */
export interface CustomEventResponse {
  /** _id field from bog-analytics */
  id: string;
  /** eventTypeId for custom events */
  eventTypeId: string;
  /** projectId field */
  projectId: string;
  /** environment field */
  environment: string;
  /** createdAt field */
  createdAt: string;
  /** updatedAt field */
  updatedAt: string;
  /** Custom properties object */
  properties: { [key: string]: string };
}

export interface CustomEventResponse_PropertiesEntry {
  key: string;
  value: string;
}

export interface CustomEventTypeResponse {
  id: string;
  category: string;
  subcategory: string;
  properties: string[];
  projectId: string;
}

export interface CustomGraphTypeResponse {
  graphs: CustomGraphType[];
}

export interface CustomGraphType {
  id: string;
  eventTypeId: string;
  projectId: string;
  graphTitle: string;
  xProperty: string;
  yProperty: string;
  graphType: string;
  /** optional field */
  caption: string;
}

/** Paginated responses - reuse existing response types in arrays + afterId */
export interface GetClickEventsResponse {
  events: ClickEventResponse[];
  afterId: string;
}

export interface GetVisitEventsResponse {
  events: VisitEventResponse[];
  afterId: string;
}

export interface GetInputEventsResponse {
  events: InputEventResponse[];
  afterId: string;
}

export interface GetCustomEventsResponse {
  events: CustomEventResponse[];
  afterId: string;
}

/** "Get All" responses - just arrays of existing response types */
export interface GetAllClickEventsResponse {
  events: ClickEventResponse[];
}

export interface GetAllVisitEventsResponse {
  events: VisitEventResponse[];
}

export interface GetAllInputEventsResponse {
  events: InputEventResponse[];
}

export interface GetAllCustomEventsResponse {
  events: CustomEventResponse[];
}

export const JUNO_ANALYTICS_SERVICE_ANALYTICS_PACKAGE_NAME =
  'juno.analytics_service.analytics';

export interface AnalyticsServiceClient {
  /** BogAnalyticsLogger methods */

  logClickEvent(request: ClickEventRequest): Observable<ClickEventResponse>;

  logVisitEvent(request: VisitEventRequest): Observable<VisitEventResponse>;

  logInputEvent(request: InputEventRequest): Observable<InputEventResponse>;

  logCustomEvent(request: CustomEventRequest): Observable<CustomEventResponse>;

  /** AnalyticsViewer methods */

  getCustomEventTypes(
    request: CustomEventTypeRequest,
  ): Observable<CustomEventTypeResponse>;

  getCustomGraphTypesById(
    request: CustomGraphTypeRequest,
  ): Observable<CustomGraphTypeResponse>;

  getClickEventsPaginated(
    request: GetClickEventsRequest,
  ): Observable<GetClickEventsResponse>;

  getAllClickEvents(
    request: GetAllClickEventsRequest,
  ): Observable<GetAllClickEventsResponse>;

  getVisitEventsPaginated(
    request: GetVisitEventsRequest,
  ): Observable<GetVisitEventsResponse>;

  getAllVisitEvents(
    request: GetAllVisitEventsRequest,
  ): Observable<GetAllVisitEventsResponse>;

  getInputEventsPaginated(
    request: GetInputEventsRequest,
  ): Observable<GetInputEventsResponse>;

  getAllInputEvents(
    request: GetAllInputEventsRequest,
  ): Observable<GetAllInputEventsResponse>;

  getCustomEventsPaginated(
    request: GetCustomEventsRequest,
  ): Observable<GetCustomEventsResponse>;

  getAllCustomEvents(
    request: GetAllCustomEventsRequest,
  ): Observable<GetAllCustomEventsResponse>;
}

export interface AnalyticsServiceController {
  /** BogAnalyticsLogger methods */

  logClickEvent(
    request: ClickEventRequest,
  ):
    | Promise<ClickEventResponse>
    | Observable<ClickEventResponse>
    | ClickEventResponse;

  logVisitEvent(
    request: VisitEventRequest,
  ):
    | Promise<VisitEventResponse>
    | Observable<VisitEventResponse>
    | VisitEventResponse;

  logInputEvent(
    request: InputEventRequest,
  ):
    | Promise<InputEventResponse>
    | Observable<InputEventResponse>
    | InputEventResponse;

  logCustomEvent(
    request: CustomEventRequest,
  ):
    | Promise<CustomEventResponse>
    | Observable<CustomEventResponse>
    | CustomEventResponse;

  /** AnalyticsViewer methods */

  getCustomEventTypes(
    request: CustomEventTypeRequest,
  ):
    | Promise<CustomEventTypeResponse>
    | Observable<CustomEventTypeResponse>
    | CustomEventTypeResponse;

  getCustomGraphTypesById(
    request: CustomGraphTypeRequest,
  ):
    | Promise<CustomGraphTypeResponse>
    | Observable<CustomGraphTypeResponse>
    | CustomGraphTypeResponse;

  getClickEventsPaginated(
    request: GetClickEventsRequest,
  ):
    | Promise<GetClickEventsResponse>
    | Observable<GetClickEventsResponse>
    | GetClickEventsResponse;

  getAllClickEvents(
    request: GetAllClickEventsRequest,
  ):
    | Promise<GetAllClickEventsResponse>
    | Observable<GetAllClickEventsResponse>
    | GetAllClickEventsResponse;

  getVisitEventsPaginated(
    request: GetVisitEventsRequest,
  ):
    | Promise<GetVisitEventsResponse>
    | Observable<GetVisitEventsResponse>
    | GetVisitEventsResponse;

  getAllVisitEvents(
    request: GetAllVisitEventsRequest,
  ):
    | Promise<GetAllVisitEventsResponse>
    | Observable<GetAllVisitEventsResponse>
    | GetAllVisitEventsResponse;

  getInputEventsPaginated(
    request: GetInputEventsRequest,
  ):
    | Promise<GetInputEventsResponse>
    | Observable<GetInputEventsResponse>
    | GetInputEventsResponse;

  getAllInputEvents(
    request: GetAllInputEventsRequest,
  ):
    | Promise<GetAllInputEventsResponse>
    | Observable<GetAllInputEventsResponse>
    | GetAllInputEventsResponse;

  getCustomEventsPaginated(
    request: GetCustomEventsRequest,
  ):
    | Promise<GetCustomEventsResponse>
    | Observable<GetCustomEventsResponse>
    | GetCustomEventsResponse;

  getAllCustomEvents(
    request: GetAllCustomEventsRequest,
  ):
    | Promise<GetAllCustomEventsResponse>
    | Observable<GetAllCustomEventsResponse>
    | GetAllCustomEventsResponse;
}

export function AnalyticsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'logClickEvent',
      'logVisitEvent',
      'logInputEvent',
      'logCustomEvent',
      'getCustomEventTypes',
      'getCustomGraphTypesById',
      'getClickEventsPaginated',
      'getAllClickEvents',
      'getVisitEventsPaginated',
      'getAllVisitEvents',
      'getInputEventsPaginated',
      'getAllInputEvents',
      'getCustomEventsPaginated',
      'getAllCustomEvents',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AnalyticsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AnalyticsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ANALYTICS_SERVICE_NAME = 'AnalyticsService';
