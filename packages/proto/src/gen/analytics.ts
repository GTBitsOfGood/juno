// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.28.2
// source: analytics.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'juno.analytics_service.analytics';

/** Click Event Request - matches bog-analytics ClickEventProperties */
export interface ClickEventRequest {
  /** objectId in bog-analytics */
  objectId: string;
  /** userId in bog-analytics */
  userId: string;
  /** API key for authenticating the request */
  apiKey: string;
}

/** Visit Event Request - matches bog-analytics VisitEventProperties */
export interface VisitEventRequest {
  /** pageUrl in bog-analytics */
  pageUrl: string;
  /** userId in bog-analytics */
  userId: string;
  /** API key for authenticating the request */
  apiKey: string;
}

/** Input Event Request - matches bog-analytics InputEventProperties */
export interface InputEventRequest {
  /** objectId in bog-analytics */
  objectId: string;
  /** userId in bog-analytics */
  userId: string;
  /** textValue in bog-analytics */
  textValue: string;
  /** API key for authenticating the request */
  apiKey: string;
}

/** Custom Event Request - matches bog-analytics logCustomEvent parameters */
export interface CustomEventRequest {
  /** category parameter in bog-analytics */
  category: string;
  /** subcategory parameter in bog-analytics */
  subcategory: string;
  /** properties object in bog-analytics */
  properties: { [key: string]: string };
  /** API key for authenticating the request */
  apiKey: string;
}

export interface CustomEventRequest_PropertiesEntry {
  key: string;
  value: string;
}

export interface ClickEventProperties {
  /** objectId in bog-analytics */
  objectId: string;
  /** userId in bog-analytics */
  userId: string;
}

export interface VisitEventProperties {
  /** pageUrl in bog-analytics */
  pageUrl: string;
  /** userId in bog-analytics */
  userId: string;
}

export interface InputEventProperties {
  /** objectId in bog-analytics */
  objectId: string;
  /** userId in bog-analytics */
  userId: string;
  /** textValue in bog-analytics */
  textValue: string;
}

/** Click Event Response - matches bog-analytics ClickEvent interface */
export interface ClickEventResponse {
  /** BaseEvent fields */
  id: string;
  /** category field */
  category: string;
  /** subcategory field */
  subcategory: string;
  /** projectId field */
  projectId: string;
  /** environment field */
  environment: string;
  /** createdAt field */
  createdAt: string;
  /** updatedAt field */
  updatedAt: string;
  /** eventProperties fields */
  eventProperties: ClickEventProperties | undefined;
}

/** Visit Event Response - matches bog-analytics VisitEvent interface */
export interface VisitEventResponse {
  /** BaseEvent fields */
  id: string;
  /** category field */
  category: string;
  /** subcategory field */
  subcategory: string;
  /** projectId field */
  projectId: string;
  /** environment field */
  environment: string;
  /** createdAt field */
  createdAt: string;
  /** updatedAt field */
  updatedAt: string;
  /** eventProperties fields */
  eventProperties: VisitEventProperties | undefined;
}

/** Input Event Response - matches bog-analytics InputEvent interface */
export interface InputEventResponse {
  /** BaseEvent fields */
  id: string;
  /** category field */
  category: string;
  /** subcategory field */
  subcategory: string;
  /** projectId field */
  projectId: string;
  /** environment field */
  environment: string;
  /** createdAt field */
  createdAt: string;
  /** updatedAt field */
  updatedAt: string;
  /** eventProperties fields */
  eventProperties: InputEventProperties | undefined;
}

/** Custom Event Response - matches bog-analytics CustomEvent interface */
export interface CustomEventResponse {
  /** _id field from bog-analytics */
  id: string;
  /** eventTypeId for custom events */
  eventTypeId: string;
  /** projectId field */
  projectId: string;
  /** environment field */
  environment: string;
  /** createdAt field */
  createdAt: string;
  /** updatedAt field */
  updatedAt: string;
  /** Custom properties object */
  properties: { [key: string]: string };
}

export interface CustomEventResponse_PropertiesEntry {
  key: string;
  value: string;
}

export const JUNO_ANALYTICS_SERVICE_ANALYTICS_PACKAGE_NAME =
  'juno.analytics_service.analytics';

export interface AnalyticsServiceClient {
  logClickEvent(request: ClickEventRequest): Observable<ClickEventResponse>;

  logVisitEvent(request: VisitEventRequest): Observable<VisitEventResponse>;

  logInputEvent(request: InputEventRequest): Observable<InputEventResponse>;

  logCustomEvent(request: CustomEventRequest): Observable<CustomEventResponse>;
}

export interface AnalyticsServiceController {
  logClickEvent(
    request: ClickEventRequest,
  ):
    | Promise<ClickEventResponse>
    | Observable<ClickEventResponse>
    | ClickEventResponse;

  logVisitEvent(
    request: VisitEventRequest,
  ):
    | Promise<VisitEventResponse>
    | Observable<VisitEventResponse>
    | VisitEventResponse;

  logInputEvent(
    request: InputEventRequest,
  ):
    | Promise<InputEventResponse>
    | Observable<InputEventResponse>
    | InputEventResponse;

  logCustomEvent(
    request: CustomEventRequest,
  ):
    | Promise<CustomEventResponse>
    | Observable<CustomEventResponse>
    | CustomEventResponse;
}

export function AnalyticsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'logClickEvent',
      'logVisitEvent',
      'logInputEvent',
      'logCustomEvent',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AnalyticsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AnalyticsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ANALYTICS_SERVICE_NAME = 'AnalyticsService';
