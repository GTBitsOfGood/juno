// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //url = "postgresql://johndoe:mysecretpassword@localhost:5432"
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  name            String
  password        String
  type            Role
  allowedProjects Project[]
}

model Project {
  id           Int                  @id @default(autoincrement())
  name         String               @unique
  apiKeys      ApiKey[]
  users        User[]
  emailService EmailServiceConfig[]
  fileService  FileServiceConfig[]
}

model ApiKey {
  id          Int        @id @default(autoincrement())
  hash        String     @unique
  scopes      ApiScope[]
  description String
  projectId   Int
  project     Project    @relation(fields: [projectId], references: [id])
  environment String
}

enum ApiScope {
  FULL
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

model EmailServiceConfig {
  id             Int
  environment    String @default("test")
  sendgridApiKey String @default("")
  emails         EmailServiceConfigAndSender[]
  domains        EmailServiceConfigAndDomain[]
  Project        Project                       @relation(fields: [id], references: [id])

  @@id([id, environment])
}

model EmailServiceConfigAndSender {
  config    EmailServiceConfig @relation(fields: [configId, configEnv], references: [id, environment])
  configId  Int // relation scalar field (used in the `@relation` attribute above)
  configEnv String
  sender    EmailSender        @relation(fields: [username, domain], references: [username, domain])
  username  String
  domain    String

  @@id([configId, configEnv, username, domain])
}

model EmailServiceConfigAndDomain {
  config    EmailServiceConfig @relation(fields: [configId, configEnv], references: [id, environment])
  configId  Int // relation scalar field (used in the `@relation` attribute above)
  configEnv String
  domain    EmailDomain        @relation(fields: [domainStr], references: [domain])
  domainStr String

  @@id([configId, configEnv, domainStr])
}

model EmailSender {
  username        String
  domain          String
  domainItem      EmailDomain                   @relation(fields: [domain], references: [domain])
  description     String? // Optional metadata/description field
  attachedConfigs EmailServiceConfigAndSender[]

  @@id([username, domain])
}

model EmailDomain {
  domain          String                        @id()
  subdomain       String?
  sendgridId      Int
  attachedConfigs EmailServiceConfigAndDomain[]
  EmailSender     EmailSender[]
}

enum FileProviderType {
  S3 
  AZURE 
}

model FileServiceConfig {
  id              Int                 
  environment    String @default("test")
  buckets         FileServiceBucket[]
  Project         Project             @relation(fields: [id], references: [id])
  FileServiceFile FileServiceFile[]
  @@id([id, environment])
}

model FileProvider {
  name              String              @id
  accessKey         String
  metadata          String
  type              FileProviderType
  FileServiceBucket FileServiceBucket[]
}

model FileServiceBucket {
  name             String
  provider         FileProvider      @relation(fields: [fileProviderName], references: [name])
  configId         Int
  configEnv        String
  config           FileServiceConfig @relation(fields: [configId, configEnv], references: [id, environment])
  fileProviderName String
  FileServiceFile  FileServiceFile[]

  @@id([name, configId, configEnv])
}

model FileServiceFile {
  path       String
  bucket     FileServiceBucket @relation(fields: [bucketName, configId, configEnv], references: [name, configId, configEnv])
  config     FileServiceConfig @relation(fields: [configId, configEnv], references: [id, environment])
  configId   Int
  configEnv  String
  bucketName String
  metadata   String

  @@id([path, bucketName, configId, configEnv])
}
